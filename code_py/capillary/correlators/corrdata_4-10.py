import numpy as np
import sys
run=sys.argv[1]
corrdir=sys.argv[2]

#run="d1"
#corrdir="Post"

#=========================================================

mmax = 6

if run=="c1":
    N=60
    
if run=="c5":
    N=60

if run=="d1":
    N=40

if run=="d5":
    N=40

    
#=========================================================
#triplets:

T = [
[[  1,   4],  [  4,  -1]],
[[  1,  -4],  [  4,   1]],
[[ -1,   4],  [  4,   1]],
[[ -4,  -1],  [  1,  -4]],
[[ -4,   1],  [  1,   4]],
[[ -4,  -1],  [ -1,   4]],
[[ -1,  -4],  [  4,  -1]],
[[ -4,   1],  [ -1,  -4]],
[[ -3,  -3],  [ -3,   3]],
[[ -3,  -3],  [  3,  -3]],
[[ -3,   3],  [  3,   3]],
[[  3,  -3],  [  3,   3]],
[[  0,   7],  [  7,   0]],
[[ -7,   0],  [  0,   7]],
[[  0,  -7],  [  7,   0]],
[[ -7,   0],  [  0,  -7]],
[[ -1,   7],  [  7,   1]],
[[ -7,  -1],  [  1,  -7]],
[[ -7,   1],  [ -1,  -7]],
[[ -7,  -1],  [ -1,   7]],
[[  1,   7],  [  7,  -1]],
[[  1,  -7],  [  7,   1]],
[[ -7,   1],  [  1,   7]],
[[ -1,  -7],  [  7,  -1]],
[[  5,  -5],  [  5,   5]],
[[ -5,  -5],  [ -5,   5]],
[[ -5,  -5],  [  5,  -5]],
[[ -5,   5],  [  5,   5]],
[[  2,  -4],  [ -8,  -4]],
[[  2,   4],  [ -8,   4]],
[[ -2,   4],  [  8,   4]],
[[ -4,   2],  [ -4,  -8]],
[[  4,  -2],  [  4,   8]],
[[  4,   2],  [  4,  -8]],
[[ -4,  -2],  [ -4,   8]],
[[ -2,  -4],  [  8,  -4]],
[[  1,   4],  [  4,  -1]],
[[  3,   3],  [  3,  -3]],
[[  2,   4],  [  4,  -2]], 
[[  3,   4],  [  4,  -3]],
[[  0,   5],  [  5,   0]],
[[  3,   3],  [ -4,   4]],
[[  4,  -4],  [  4,   4]],
[[  4,   4],  [  4,  -4]],
[[  0,   6],  [  6,   0]],
[[  6,   0],  [  0,   7]],
[[  1,   4],  [ -8,   2]],
[[  1,   4],  [  8,  -2]],
[[  0,   6],  [  6,   0]],
[[  0,   6],  [  7,   0]],
[[  1,   4],  [  8,  -2]],
[[  1,   4],  [ -8,   2]],
[[  0,   7],  [  7,   0]],
[[  1,   7],  [  7,  -1]],
[[  5,   5],  [  5,  -5]],
[[  0,   6],  [  8,   0]],
[[  2,   4],  [  8,  -4]],
[[  2,   4],  [ -8,   4]],
[[  3,   6],  [ -8,   4]],
[[  0,   5],  [ 10,   0]],
[[  3,   4],  [ -8,   6]],
[[  0,   8],  [  8,   0]],
[[  1,   8],  [  8,  -1]],
[[  0,   7],  [  9,   0]],
[[  2,   6],  [ -9,   3]],
[[  1,   5],  [-10,   2]],
[[  0,   8],  [  9,   0]],
[[  2,   5],  [-10,   4]],
[[  2,   4],  [-10,   5]],
[[  0,   9],  [  9,   0]],
]


#quadruplets:


Q = [
[[ -1,  4],  [  4,   1],  [  5,  -3]],
[[  3, -3],  [  3,   3],  [  0,   5]],
[[ -3,  3],  [  3,   3],  [  6,   0]],
[[  3, -3],  [  3,   3],  [  0,   7]],
[[ -3,  3],  [  3,   3],  [  8,   0]],
[[  3, -3],  [  3,   3],  [  0,   9]],
[[ -3,  3],  [  3,   3],  [ 10,   0]],
[[ -2,  4],  [  4,   2],  [  6,  -2]],
[[ -2,  4],  [  4,   2],  [ -9,   3]],
[[  0,   5],  [  5,   0],  [  3,  -3]],
[[  0,   5],  [  5,   0],  [  4,  -4]],
[[  0,   5],  [  5,   0],  [  5,  -5]],
[[  3,   4],  [  4,  -3],  [ -1,   7]],
[[  3,   3],  [ -4,   4],  [  7,   1]],
[[  4,  -4],  [  4,   4],  [  0, -5]],
[[  4,  -4],  [  4,   4],  [  0,   6]],
[[  4,  -4],  [  4,   4],  [  0,   7]],
[[  4,  -4],  [  4,   4],  [  0,   8]],
[[  4,  -4],  [  4,   4],  [  0,   9]],
[[  4,  -4],  [  4,   4],  [  0,  10]],
[[  0,   6],  [  6,   0],  [  3,  -3]],
[[  0,   6],  [  6,   0],  [  4,  -4]],
[[  0,   7],  [  7,   0],  [  3,  -3]],
[[  1,   7],  [  7,  -1],  [ -3,  4]], 
[[  0,   6],  [  8,   0],  [ -3,  4]], 
[[  2,   4],  [ -8,   4],  [ -4, -3]], 
[[  5,   5],  [  5,  -5],  [  0,   5]], 
[[  5,   5],  [  5,  -5],  [  0,   6]], 
[[  5,   5],  [  5,  -5],  [  0,   7]], 
[[  5,   5],  [  5,  -5],  [  0,   8]], 
[[  5,   5],  [  5,  -5],  [  0,   9]], 
[[  5,   5],  [  5,  -5],  [  0,  10]], 
[[  2,   4],  [  8,  -4],  [  0,   5]], 
[[  2,   4],  [  8,  -4],  [  0,   6]], 
[[  2,   4],  [  8,  -4],  [  0,   7]], 
[[  2,   4],  [  8,  -4],  [  0,   8]], 
[[  2,   4],  [  8,  -4],  [  0,   9]], 
[[  2,   4],  [  8,  -4],  [  0,  10]], 
[[  3,   6],  [ -8,   4],  [ -4,  -2]], 
[[  0,   5],  [ 10,   0],  [ -2,   4]], 
[[  3,   4],  [ -8,   6],  [ -4,  -2]], 
]

#==========================================================

def process_one(filename, Csum, N, mmax):

    def ind2mode(ind):

        i0 = ind[0]
        i1 = ind[1]
        if i0 > N/2:
            i0 = i0 - N
        if i1 > N/2:
            i1 = i1 - N
        return(i1,i0)

    c = np.load(filename)

    cabs = np.abs(c)
    cphi = np.angle(c)/np.pi
    cavg = np.average(cabs)


    print("")
    print("File: {},  mode sum: [{:+3d} {:+3d}]".format(filename, Csum[0], Csum[1]))
    print("C is time average of complex correlator.")
    print("Average over modes <|C|> = {:9.3e}".format(cavg))
    print("First {} modes with highest |C|:".format(mmax))

    print("     1.mode         2.|C|   3.|C|/<|C|>  4.phase/pi" )


    m=0
    while m<mmax: 
        cmax = np.max(cabs)
        ii   = np.argmax(cabs)
        ind  = np.unravel_index(ii, cabs.shape)
        mode = ind2mode(ind)
        phi  = cphi[ind] 

        print("    [{:+3d} {:+3d}]     {:9.3e}   {:8.2f}   {:6.2f}".format(mode[0], mode[1], cmax, cmax/cavg, phi))

        cabs[ind] = 0
        m = m+1


    print("")



#-----------------------------------------------------------------


def process_two(filename, Csum, N, mmax):

    def ind2mode(ind):

        i0 = ind[0]
        i1 = ind[1]
        if i0 > N/2:
            i0 = i0 - N
        if i1 > N/2:
            i1 = i1 - N
        return(i1,i0)

    c = np.load(filename)

    cabs = np.abs(c)
    cphi = np.angle(c)/np.pi
    cavg = np.average(cabs)

    ind=(Csum[1],Csum[0])
    cmax1 = cabs[ind]
    phi1  = cphi[ind]
    cabs[ind] = 0

    cmax2 = np.max(cabs)
    ii   = np.argmax(cabs)
    ind  = np.unravel_index(ii, cabs.shape)
    mode2 = ind2mode(ind)
    phi2  = cphi[ind] 


    print("{} [{:+3d} {:+3d}]  {:9.3e} {:6.2f} {:6.2f}   [{:+3d} {:+3d}]  {:9.3e} {:6.2f} {:6.2f}".format(
        filename, Csum[0], Csum[1],  cmax1, cmax1/cavg, phi1,
        mode2[0], mode2[1], cmax2, cmax2/cavg, phi2))


    
#-----------------------------------------------------------------


for C in T:
    corr = "{:+03d}{:+03d}{:+03d}{:+03d}".format(
        C[0][0], C[0][1], C[1][0], C[1][1])
    name = corrdir + '/' + run + corr + ".npy"
    Csum = np.sum(C,0)
    process_two(name, Csum, N, mmax)
    
for C in Q:
    corr = "{:+03d}{:+03d}{:+03d}{:+03d}{:+03d}{:+03d}".format(
        C[0][0], C[0][1], C[1][0], C[1][1], C[2][0], C[2][1] )
    name = corrdir + '/' + run + corr + ".npy"
    Csum = np.sum(C,0)
    process_two(name, Csum, N, mmax)
 




