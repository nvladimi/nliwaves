function U = giaflucs(fbase, seed)

  codeversion = "2018/10/25";

  r_filter = 0.0;      % cm, set to 0 to turn off

%-- read parameters and print header to file --

  [datadir, Cnsq, N, dx, steps, dz, lambda, w0] = read_parameters(fbase);

  fout = [datadir, '/', fbase, '.', num2str(seed,'%06d')];

  fid = fopen(fout,'wt');

  fprintf(fid,'%% Light propagation through random medium\n');
  fprintf(fid,'%% generated by "giaflucs.m" version %s.\n', codeversion);
  fprintf(fid,'%% Parameters: \n');
  fprintf(fid,'%%     seed  = %d \n', seed);
  fprintf(fid,'%%     Cnsq  = %e \n', Cnsq);
  fprintf(fid,'%%     N     = %d \n', N);
  fprintf(fid,'%%     dx    = %e \n', dx);
  fprintf(fid,'%%     steps = %d \n', steps);
  fprintf(fid,'%%     dz    = %e \n', dz);
  fprintf(fid,'%%     lambda= %e \n', lambda);
  fprintf(fid,'%%     w0    = %e \n', w0);
 
  kz = 2*pi/lambda;
  zR = kz*w0**2/2; 
  L  = N*dx;

%-- Initializaion --

  rand('twister', seed);
 
  iunit = i;

  dk = 2*pi/L;

  k = 0:N-1; 
  k0 = floor((N-1)/2); 
  k = circshift(k-k0,[0,-k0]);

  [Kx, Ky] = meshgrid(k,k);
  M = (-1).^(Kx + Ky);
  K = sqrt(Kx.*Kx + Ky.*Ky) * dk;
  expLin = exp(iunit*K.*K*0.5*dz/kz);

  clear Kx  Ky

  x = ((0:N-1)/N - 0.5)*L;
  y = ((0:N-1)/N - 0.5)*L;

  [X, Y] = meshgrid (x, y);

  U = ic_gauss(X, Y, w0);

%-- propagation --

  for istep = 1:steps

    S = giaflucs_screen(K, M, Cnsq, dz, kz, r_filter);
 
    U = U.*exp(iunit*S);

    U = ifftn( fftn(U) .* expLin );      % time advancement

    output(fid, U, X, Y, istep);

  end

  fclose(fid);

  % imagesc(abs(U)); axis('equal');

end

%------------------------------------------------------
function U = ic_gauss(X, Y, r0)
%------------------------------------------------------

  rr = X.*X + Y.*Y;
  rr0 = r0*r0;

  U = exp(-rr/rr0);

end


%------------------------------------------------------
function output(fid, U, X, Y, istep)
%------------------------------------------------------

  if (istep == 1)
     fprintf(fid,'%%\n%% 1.istep  2.Imax  3.xm  4.ym  5.wm  6.wo  7.Io\n\n');
  end

  N = length(U);
  UU = U.*conj(U);


  %-- with respect to origin -- 

  RR = X.^2 + Y.^2;    

  I0 = sum(sum( UU ));
  I2 = sum(sum( UU .*RR ));
  wo = sqrt(2*I2/I0);

  Io = UU(N/2+1, N/2+1); 
 

  %-- with respect to new center --

  Imax = max(max(UU));

  ind = find(UU==Imax); ind=ind(1);
  Ic = UU(ind);
  xc = X(ind);
  yc = Y(ind);

  rc = sqrt(xc*xc + yc*yc);

  RR = (X-xc).^2 + (Y-yc).^2;    
  I2 = sum(sum( UU .*RR ));
  wc = sqrt(2*I2/I0);


  %-- print to file --
  
  fprintf(fid,'%5d  %12.6e    %13.6e  %13.6e  %12.6e    %12.6e  %12.6e\n', ...
	  istep,  Imax,  xc, yc, wc, wo, Io);

end

%------------------------------------------------------

function [datadir, Cnsq, N, dx, steps, dz, lambda, w0] = read_parameters(fbase)

  fid = fopen([fbase, '.param']);
  if strncmp(version,'3.4.0',5)
       s   = textscan(fid,'%s%s', 'commentstyle', 'shell');
  else
       s   = textscan(fid,'%s%s', 'commentstyle', '#');
  end
  fclose(fid);
 
  %-------------

  ind = strncmp('datadir',s{1},7);  
  if (ind<0) disp('undefined "datadir"');  
  else datadir = s{2}(ind){1}; 
  end

  ind = strncmp('Cnsq',s{1},4);   
  if (ind<0) disp('undefined "Cnsq"');  
  else a=s{2}(ind){1}; Cnsq =   str2num(a); 
  end

  ind = strncmp('N',s{1},1);      
  if (ind<0) disp('undefined "N"');
  else a=s{2}(ind){1}; N =      str2num(a); 
  end

  ind = strncmp('dx',s{1},2);
  if (ind<0) disp('undefined "dx"');  
  else a=s{2}(ind){1}; dx =     str2num(a);
  end

  ind = strncmp('steps',s{1},5);  
  if (ind<0) disp('undefined "steps"');
  else a=s{2}(ind){1}; steps =  str2num(a);
  end

  ind = strncmp('dz',s{1},2);     
  if (ind<0) disp('undefined "dz"');
  else a=s{2}(ind){1}; dz =     str2num(a);
  end

  ind = strncmp('lambda',s{1},6); 
  if (ind<0) disp('undefined "lambda"');
  else a=s{2}(ind){1}; lambda = str2num(a);
  end

  ind = strncmp('w0',s{1},2);    
  if (ind<0) disp('undefined "w0"');
  else a=s{2}(ind){1}; w0 =     str2num(a);
  end

end

%------------------------------------------------------
