
-----------------------------------------------------------
  FILES
-----------------------------------------------------------

Makefile                makes nls.x, nlspost.x, or nlstest.x

executable: nls.x       time evolution of 2D psi
	    		in nonlinear Schrodinger Equation

  header.h              declaration of global functions and structures
  main.c                main driver: time, IC, and IO manager
  splitstep.c           computational part: splitstep and forcing
  myfft.c               wrapper for FFTW2 routines, spectral derivatives 
  arrays.c              creation, copying, and differentiation of arrays
  parameters.c          read text input file, write text header
  ic.c                  initial conditions
  io.c                  (mostly) binary input / output
  timers.c              collect performance info by subroutine
  clock_gettime_stub.c  stub for system's "gettime" function (MAC only)

  infodat.c             compute integral quantities, psi_max, etc 
  spectrum.c            compute spectrum of |psi|^2
  pdf.c                 compute pdf of |psi|
  collapseDB.c          maintain database of collapses
  collapseInt.c         interpolate collapse at the center 
  collapseMisc.c        old stuff, DO NOT USE! 


executable: nlspost.x   parallel post processing of binary psi

  post.c                main driver; uses myfft.c, arrays.c, and timers.c   
  post_blur.c           filter out high frequencies in psi
  post_bumps.c          compute H(r) and NP(r) around each maximum
  post_param.c          read text input file, write text header
  post_io.c             (mostly) binary input / output


executable: nls.x       time evolution of 2D psi 


executable: capillary.x       time evolution of 2D psi
	    		in capillary wave Equation

  header.h              declaration of global functions and structures
  main.c                main driver: time, IC, and IO manager
  grids.c		initialization of grids and regridding subroutines (not used)
  fftw_wrap.c		wrappers for FFTW3 routines
  fft_extra.c           spectral derivatives and other fft-based routines
  io.c                  (mostly) binary input / output
  evolve_rk.c           wrapper for one step of Runger-Kutta and forcing routines
  rk.c                  Runge-Kutta time advancement
  rhs_capillary.c       right hand side for Runge-Kutta routines (except forcing)
  forcing_rk.c          forcing term for right-hand-side
  myrand48.c            random numbers manager (assign and save seeds for all tasks) 
  infodat_capillary.c   global quanitities for capillary setup seved in *.dat file
  diag_capillary.c      wrapper for diagnostics, used only for spectrum
  diag_spectrum.c       time-averaging of spectrum for diagnostic purposes
  timers.c              collect performance info by subroutine
  arrays.c              creation, copying, and differentiation of arrays
                        with central differences (non used)
  collapse_one.c        not used
  mask.c                not used



executable: nlstest.x   tests for various components of the code

  test_*.c              main drivers; replace main.c         
  test_deriv.c
  test_dgels.c
  test_fft2d.c
  test_fft3d.c
  test_interp.c
  test_myqr.c
  test_timers.c


small stand-along codes

  cyclops.c            1D code for cylindrical (radial) collapses
  dataray.c            extract radial data from 2D collapses

directory "util"

  *.in                 examples of input files
  *.sub                examples of submission scripts
  qr*.dat              inverted matrices Q and R in text form
  myqr.m               matlab/octave script to create qr*.dat

-----------------------------------------------------------
